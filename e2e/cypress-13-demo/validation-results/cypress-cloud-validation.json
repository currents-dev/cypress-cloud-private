[
    {
        "path": "totalDuration",
        "valueA": 14297,
        "valueB": 13807,
        "isEqual": false
    },
    {
        "path": "totalSuites",
        "valueA": 2,
        "valueB": 2,
        "isEqual": true
    },
    {
        "path": "totalPending",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "totalFailed",
        "valueA": 3,
        "valueB": 3,
        "isEqual": true
    },
    {
        "path": "totalSkipped",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "totalPassed",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "totalTests",
        "valueA": 4,
        "valueB": 4,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.duration",
        "valueA": 2254,
        "valueB": 1908,
        "isEqual": false
    },
    {
        "path": "runs[0].stats.endedAt",
        "valueA": "2023-09-07T14:43:14.391Z",
        "valueB": "2023-09-07T15:45:07.004Z",
        "isEqual": false
    },
    {
        "path": "runs[0].stats.startedAt",
        "valueA": "2023-09-07T14:43:12.137Z",
        "valueB": "2023-09-07T15:45:05.096Z",
        "isEqual": false
    },
    {
        "path": "runs[0].stats.failures",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.passes",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.pending",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.skipped",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.suites",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].stats.tests",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].reporter",
        "valueA": "spec",
        "valueB": "spec",
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.suites",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.tests",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.passes",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.pending",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.failures",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].reporterStats.start",
        "valueA": "2023-09-07T14:43:12.139Z",
        "valueB": "2023-09-07T15:45:05.099Z",
        "isEqual": false
    },
    {
        "path": "runs[0].reporterStats.end",
        "valueA": "2023-09-07T14:43:14.394Z",
        "valueB": "2023-09-07T15:45:07.006Z",
        "isEqual": false
    },
    {
        "path": "runs[0].reporterStats.duration",
        "valueA": 2255,
        "valueB": 1907,
        "isEqual": false
    },
    {
        "path": "runs[0].spec.fileExtension",
        "valueA": ".js",
        "valueB": ".js",
        "isEqual": true
    },
    {
        "path": "runs[0].spec.baseName",
        "valueA": "retries.spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].spec.fileName",
        "valueA": "retries",
        "valueB": "retries",
        "isEqual": true
    },
    {
        "path": "runs[0].spec.specFileExtension",
        "valueA": ".spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].spec.relativeToCommonRoot",
        "valueA": "retries.spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].spec.specType",
        "valueA": "integration",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].spec.name",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].spec.relative",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "cypress/e2e/retries.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[0].spec.absolute",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].error",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "runs[0].video",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/videos/retries.spec.js.mp4",
        "valueB": null,
        "isEqual": false
    },
    {
        "path": "runs[0].shouldUploadVideo",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "runs[0].hooks",
        "valueA": [
            {
                "hookId": "h1",
                "hookName": "before each",
                "title": [
                    "\"before each\" hook"
                ],
                "body": "() => {\n  const currentTest = cy.state(\"ctx\").currentTest;\n  if (currentTest) {\n    handleBefore(currentTest);\n  }\n}"
            },
            {
                "hookId": "h2",
                "hookName": "before each",
                "title": [
                    "\"before each\" hook"
                ],
                "body": "function () {\n    cy.visit(\"/\");\n}"
            },
            {
                "hookId": "h4",
                "hookName": "after each",
                "title": [
                    "\"after each\" hook"
                ],
                "body": "function () {\n      self.sendLogsToPrinter(self.collectorState.getCurrentLogStackIndex(), self.collectorState.getCurrentTest());\n    }"
            },
            {
                "hookId": "h5",
                "hookName": "after each",
                "title": [
                    "\"after each\" hook"
                ],
                "body": "() => {\n  const currentTest = cy.state(\"ctx\").currentTest;\n  if (currentTest) {\n    handleAfter(currentTest);\n  }\n}"
            },
            {
                "hookId": "h3",
                "hookName": "after all",
                "title": [
                    "\"after all\" hook"
                ],
                "body": "function () {\n      // Need to wait otherwise some last commands get omitted from logs.\n      cy.task(CONSTANTS.TASK_NAME_OUTPUT, null, {log: false});\n    }"
            }
        ],
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].0",
        "valueA": "R",
        "valueB": "R",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].1",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].2",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].3",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].4",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].5",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[0].6",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].0",
        "valueA": "R",
        "valueB": "R",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].1",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].2",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].3",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].4",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].5",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].6",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].7",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].8",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].9",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].10",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].11",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].12",
        "valueA": "w",
        "valueB": "w",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].13",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].14",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].15",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].16",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].17",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].18",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].19",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].20",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].21",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].22",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].title[1].23",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].body",
        "valueA": "function () {\n    throw new Error(\"x\".repeat(1024));\n    // if (i > 1) {\n    //   i--;\n    // }\n    // return;\n  }",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].displayError",
        "valueA": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/retries.spec.js:9:12)",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/retries.spec.js:9:12)",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.name",
        "valueA": "Error",
        "valueB": "Error",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.message",
        "valueA": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/retries.spec.js:9:12)",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/retries.spec.js:9:12)",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.line",
        "valueA": 9,
        "valueB": 9,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.column",
        "valueA": 13,
        "valueB": 13,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "cypress/e2e/retries.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.frame",
        "valueA": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "valueB": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.lifecycle",
        "valueA": 36,
        "valueB": 14,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[0].fnDuration",
        "valueA": 19,
        "valueB": 19,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[0].afterFnDuration",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[1].fnDuration",
        "valueA": 484,
        "valueB": 415,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.before each[1].afterFnDuration",
        "valueA": 0,
        "valueB": 1,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.test.fnDuration",
        "valueA": 5,
        "valueB": 5,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.test.afterFnDuration",
        "valueA": 318,
        "valueB": 240,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.after each[0].fnDuration",
        "valueA": 12,
        "valueB": 13,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.after each[0].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 13,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:12.160Z",
        "valueB": "2023-09-07T15:45:05.114Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].wallClockDuration",
        "valueA": 892,
        "valueB": 695,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].videoTimestamp",
        "valueA": 2875,
        "valueB": 18,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].startedAt",
        "valueA": "2023-09-07T14:43:12.160Z",
        "valueB": "2023-09-07T15:45:05.114Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].duration",
        "valueA": 892,
        "valueB": 695,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].screenshotId",
        "valueA": "kl773",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].testAttemptIndex",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:12.709Z",
        "valueB": "2023-09-07T15:45:05.572Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed).png",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 331358,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[0].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 236,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.name",
        "valueA": "Error",
        "valueB": "Error",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.message",
        "valueA": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/retries.spec.js:9:12)",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/retries.spec.js:9:12)",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.line",
        "valueA": 9,
        "valueB": 9,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.column",
        "valueA": 13,
        "valueB": 13,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "cypress/e2e/retries.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.frame",
        "valueA": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "valueB": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.lifecycle",
        "valueA": 23,
        "valueB": 28,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[0].fnDuration",
        "valueA": 8,
        "valueB": 19,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 1,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[1].fnDuration",
        "valueA": 56,
        "valueB": 57,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.before each[1].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.test.fnDuration",
        "valueA": 5,
        "valueB": 5,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.test.afterFnDuration",
        "valueA": 270,
        "valueB": 222,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.after each[0].fnDuration",
        "valueA": 13,
        "valueB": 12,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.after each[0].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 17,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:13.073Z",
        "valueB": "2023-09-07T15:45:05.864Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].wallClockDuration",
        "valueA": 396,
        "valueB": 335,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].videoTimestamp",
        "valueA": 3788,
        "valueB": 768,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].startedAt",
        "valueA": "2023-09-07T14:43:13.073Z",
        "valueB": "2023-09-07T15:45:05.864Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].duration",
        "valueA": 396,
        "valueB": 335,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].screenshotId",
        "valueA": "k8c2c",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].testAttemptIndex",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:13.168Z",
        "valueB": "2023-09-07T15:45:05.978Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 2).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 2).png",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 379236,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[1].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 220,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.name",
        "valueA": "Error",
        "valueB": "Error",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.message",
        "valueA": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/retries.spec.js:9:12)",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/retries.spec.js:9:12)",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.line",
        "valueA": 9,
        "valueB": 9,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.column",
        "valueA": 13,
        "valueB": 13,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "cypress/e2e/retries.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.frame",
        "valueA": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "valueB": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.lifecycle",
        "valueA": 36,
        "valueB": 24,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[0].fnDuration",
        "valueA": 12,
        "valueB": 10,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[1].fnDuration",
        "valueA": 60,
        "valueB": 54,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.before each[1].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.test.fnDuration",
        "valueA": 5,
        "valueB": 4,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.test.afterFnDuration",
        "valueA": 278,
        "valueB": 235,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.after each[0].fnDuration",
        "valueA": 14,
        "valueB": 15,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.after each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 22,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:13.481Z",
        "valueB": "2023-09-07T15:45:06.247Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].wallClockDuration",
        "valueA": 428,
        "valueB": 331,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].videoTimestamp",
        "valueA": 4196,
        "valueB": 1151,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].startedAt",
        "valueA": "2023-09-07T14:43:13.481Z",
        "valueB": "2023-09-07T15:45:06.247Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].duration",
        "valueA": 428,
        "valueB": 331,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].screenshotId",
        "valueA": "5t74s",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].testAttemptIndex",
        "valueA": 2,
        "valueB": 2,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:13.598Z",
        "valueB": "2023-09-07T15:45:06.347Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 3).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 3).png",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 378475,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[2].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 233,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.name",
        "valueA": "Error",
        "valueB": "Error",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.message",
        "valueA": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/retries.spec.js:9:12)",
        "valueB": "Error: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/retries.spec.js:9:12)",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.line",
        "valueA": 9,
        "valueB": 9,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.column",
        "valueA": 13,
        "valueB": 13,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/retries.spec.js",
        "valueB": "cypress/e2e/retries.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/retries.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.frame",
        "valueA": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "valueB": "   7 |     },\n   8 |     function () {\n>  9 |       throw new Error(\"x\".repeat(1024));\n     |             ^\n  10 |       // if (i > 1) {\n  11 |       //   i--;\n  12 |       // }",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.lifecycle",
        "valueA": 62,
        "valueB": 26,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[0].fnDuration",
        "valueA": 15,
        "valueB": 14,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[1].fnDuration",
        "valueA": 59,
        "valueB": 50,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.before each[1].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.test.fnDuration",
        "valueA": 5,
        "valueB": 4,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.test.afterFnDuration",
        "valueA": 268,
        "valueB": 212,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.after each[0].fnDuration",
        "valueA": 13,
        "valueB": 12,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.after each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 22,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].timings.after all",
        "valueA": [
            {
                "hookId": "h3",
                "fnDuration": 4,
                "afterFnDuration": 0
            }
        ],
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:13.922Z",
        "valueB": "2023-09-07T15:45:06.637Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].wallClockDuration",
        "valueA": 454,
        "valueB": 309,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].videoTimestamp",
        "valueA": 4637,
        "valueB": 1541,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].startedAt",
        "valueA": "2023-09-07T14:43:13.922Z",
        "valueB": "2023-09-07T15:45:06.637Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].duration",
        "valueA": 454,
        "valueB": 309,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].screenshotId",
        "valueA": "5atgm",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].testAttemptIndex",
        "valueA": 3,
        "valueB": 3,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:14.067Z",
        "valueB": "2023-09-07T15:45:06.735Z",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 4).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/retries.spec.js/Retries -- Runs a test with retries (failed) (attempt 4).png",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 377835,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "retries.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].attempts[3].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 210,
        "isEqual": false
    },
    {
        "path": "runs[0].tests[0].duration",
        "valueA": "Does not exist",
        "valueB": 1830,
        "isEqual": false
    },
    {
        "path": "runs[1].stats.duration",
        "valueA": 12043,
        "valueB": 11899,
        "isEqual": false
    },
    {
        "path": "runs[1].stats.endedAt",
        "valueA": "2023-09-07T14:43:30.200Z",
        "valueB": "2023-09-07T15:45:19.927Z",
        "isEqual": false
    },
    {
        "path": "runs[1].stats.startedAt",
        "valueA": "2023-09-07T14:43:18.157Z",
        "valueB": "2023-09-07T15:45:08.028Z",
        "isEqual": false
    },
    {
        "path": "runs[1].stats.failures",
        "valueA": 2,
        "valueB": 2,
        "isEqual": true
    },
    {
        "path": "runs[1].stats.passes",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[1].stats.pending",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].stats.skipped",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].stats.suites",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[1].stats.tests",
        "valueA": 3,
        "valueB": 3,
        "isEqual": true
    },
    {
        "path": "runs[1].reporter",
        "valueA": "spec",
        "valueB": "spec",
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.suites",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.tests",
        "valueA": 3,
        "valueB": 3,
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.passes",
        "valueA": 1,
        "valueB": 1,
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.pending",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.failures",
        "valueA": 2,
        "valueB": 2,
        "isEqual": true
    },
    {
        "path": "runs[1].reporterStats.start",
        "valueA": "2023-09-07T14:43:18.158Z",
        "valueB": "2023-09-07T15:45:08.032Z",
        "isEqual": false
    },
    {
        "path": "runs[1].reporterStats.end",
        "valueA": "2023-09-07T14:43:30.204Z",
        "valueB": "2023-09-07T15:45:19.929Z",
        "isEqual": false
    },
    {
        "path": "runs[1].reporterStats.duration",
        "valueA": 12046,
        "valueB": 11897,
        "isEqual": false
    },
    {
        "path": "runs[1].spec.fileExtension",
        "valueA": ".js",
        "valueB": ".js",
        "isEqual": true
    },
    {
        "path": "runs[1].spec.baseName",
        "valueA": "xxx.spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].spec.fileName",
        "valueA": "xxx",
        "valueB": "xxx",
        "isEqual": true
    },
    {
        "path": "runs[1].spec.specFileExtension",
        "valueA": ".spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].spec.relativeToCommonRoot",
        "valueA": "xxx.spec.js",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].spec.specType",
        "valueA": "integration",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].spec.name",
        "valueA": "cypress/e2e/xxx.spec.js",
        "valueB": "xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].spec.relative",
        "valueA": "cypress/e2e/xxx.spec.js",
        "valueB": "cypress/e2e/xxx.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[1].spec.absolute",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/xxx.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].error",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "runs[1].video",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/videos/xxx.spec.js.mp4",
        "valueB": null,
        "isEqual": false
    },
    {
        "path": "runs[1].shouldUploadVideo",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "runs[1].hooks",
        "valueA": [
            {
                "hookId": "h1",
                "hookName": "before each",
                "title": [
                    "\"before each\" hook"
                ],
                "body": "() => {\n  const currentTest = cy.state(\"ctx\").currentTest;\n  if (currentTest) {\n    handleBefore(currentTest);\n  }\n}"
            },
            {
                "hookId": "h2",
                "hookName": "before each",
                "title": [
                    "\"before each\" hook"
                ],
                "body": "function () {\n    cy.visit(\"/\");\n}"
            },
            {
                "hookId": "h6",
                "hookName": "before each",
                "title": [
                    "\"before each\" hook"
                ],
                "body": "function () {\n    cy.createDefaultTodos().as(\"todos\");\n  }"
            },
            {
                "hookId": "h4",
                "hookName": "after each",
                "title": [
                    "\"after each\" hook"
                ],
                "body": "function () {\n      self.sendLogsToPrinter(self.collectorState.getCurrentLogStackIndex(), self.collectorState.getCurrentTest());\n    }"
            },
            {
                "hookId": "h5",
                "hookName": "after each",
                "title": [
                    "\"after each\" hook"
                ],
                "body": "() => {\n  const currentTest = cy.state(\"ctx\").currentTest;\n  if (currentTest) {\n    handleAfter(currentTest);\n  }\n}"
            },
            {
                "hookId": "h3",
                "hookName": "after all",
                "title": [
                    "\"after all\" hook"
                ],
                "body": "function () {\n      // Need to wait otherwise some last commands get omitted from logs.\n      cy.task(CONSTANTS.TASK_NAME_OUTPUT, null, {log: false});\n    }"
            }
        ],
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].0",
        "valueA": "C",
        "valueB": "C",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].1",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].2",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].3",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].4",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].5",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].6",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].7",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].8",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].9",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].10",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].11",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].12",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].13",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].14",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].15",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].16",
        "valueA": "b",
        "valueB": "b",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].17",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].18",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].19",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].20",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[0].21",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].0",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].1",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].2",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].3",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].4",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].5",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].6",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].7",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].8",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].9",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].10",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].11",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].12",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].13",
        "valueA": "y",
        "valueB": "y",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].14",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].15",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].16",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].17",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].18",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].19",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].20",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].21",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].22",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].23",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].24",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].25",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].26",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].27",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].28",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].29",
        "valueA": "x",
        "valueB": "x",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].title[1].30",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].body",
        "valueA": "function () {\n    cy.get(\"@todos\").eq(0).find(\".toggle\").check();\n    cy.get(\".clear-completed\").contains(\"Clear completed X\");\n  }",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].displayError",
        "valueA": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Clear completed X' within the element: <button.clear-completed> but never did.\n    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/xxx.spec.js:17:33)",
        "valueB": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Clear completed X' within the element: <button.clear-completed> but never did.\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/xxx.spec.js:17:33)",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.name",
        "valueA": "AssertionError",
        "valueB": "AssertionError",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.message",
        "valueA": "Timed out retrying after 4000ms: Expected to find content: 'Clear completed X' within the element: <button.clear-completed> but never did.",
        "valueB": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Clear completed X' within the element: <button.clear-completed> but never did.",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/xxx.spec.js:17:33)",
        "valueB": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Clear completed X' within the element: <button.clear-completed> but never did.\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/xxx.spec.js:17:33)",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.line",
        "valueA": 17,
        "valueB": 17,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.column",
        "valueA": 34,
        "valueB": 34,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/xxx.spec.js",
        "valueB": "cypress/e2e/xxx.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/xxx.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/xxx.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.frame",
        "valueA": "  15 |     function () {\n  16 |       cy.get(\"@todos\").eq(0).find(\".toggle\").check();\n> 17 |       cy.get(\".clear-completed\").contains(\"Clear completed X\");\n     |                                  ^\n  18 |     }\n  19 |   );\n  20 | ",
        "valueB": "  15 |     function () {\n  16 |       cy.get(\"@todos\").eq(0).find(\".toggle\").check();\n> 17 |       cy.get(\".clear-completed\").contains(\"Clear completed X\");\n     |                                  ^\n  18 |     }\n  19 |   );\n  20 | ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.lifecycle",
        "valueA": 36,
        "valueB": 31,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[0].fnDuration",
        "valueA": 13,
        "valueB": 12,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[0].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[1].fnDuration",
        "valueA": 147,
        "valueB": 134,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[1].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[2].hookId",
        "valueA": "h6",
        "valueB": "h6",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[2].fnDuration",
        "valueA": 842,
        "valueB": 821,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.before each[2].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.test.fnDuration",
        "valueA": 4097,
        "valueB": 4093,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.test.afterFnDuration",
        "valueA": 247,
        "valueB": 211,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.after each[0].fnDuration",
        "valueA": 14,
        "valueB": 13,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.after each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 1,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 17,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:18.180Z",
        "valueB": "2023-09-07T15:45:08.032Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].wallClockDuration",
        "valueA": 5422,
        "valueB": 5305,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].videoTimestamp",
        "valueA": 1253,
        "valueB": 4,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].startedAt",
        "valueA": "2023-09-07T14:43:18.180Z",
        "valueB": "2023-09-07T15:45:08.032Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].duration",
        "valueA": 5422,
        "valueB": 5305,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].screenshotId",
        "valueA": "f0mre",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].testId",
        "valueA": "r3",
        "valueB": "r3",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].testAttemptIndex",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:23.326Z",
        "valueB": "2023-09-07T15:45:13.129Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/xxx.spec.js/Clear completed button -- should display the correct text (failed).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/xxx.spec.js/Clear completed button -- should display the correct text (failed).png",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 418323,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].attempts[0].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 208,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[0].duration",
        "valueA": "Does not exist",
        "valueB": 5343,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].testId",
        "valueA": "r4",
        "valueB": "r4",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].0",
        "valueA": "C",
        "valueB": "C",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].1",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].2",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].3",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].4",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].5",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].6",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].7",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].8",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].9",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].10",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].11",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].12",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].13",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].14",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].15",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].16",
        "valueA": "b",
        "valueB": "b",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].17",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].18",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].19",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].20",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[0].21",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].0",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].1",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].2",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].3",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].4",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].5",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].6",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].7",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].8",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].9",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].10",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].11",
        "valueA": "v",
        "valueB": "v",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].12",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].13",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].14",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].15",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].16",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].17",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].18",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].19",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].20",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].21",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].22",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].23",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].24",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].25",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].26",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].27",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].28",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].29",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].30",
        "valueA": "w",
        "valueB": "w",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].31",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].32",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].33",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].34",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].35",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].36",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].37",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].38",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].39",
        "valueA": "k",
        "valueB": "k",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].40",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].title[1].41",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].body",
        "valueA": "function () {\n    cy.get(\"@todos\").eq(1).find(\".toggle\").check();\n    cy.get(\".clear-completed\").click();\n    cy.get(\"@todos\").should(\"have.length\", 2);\n    cy.get(\".todo-list li\").eq(0).should(\"contain\", TODO_ITEM_ONE);\n    cy.get(\".todo-list li\").eq(1).should(\"contain\", \"XXXX\");\n  }",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].displayError",
        "valueA": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'item A'\n    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/xxx.spec.js:31:36)",
        "valueB": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'item A'\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/xxx.spec.js:31:36)",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].state",
        "valueA": "failed",
        "valueB": "failed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.name",
        "valueA": "AssertionError",
        "valueB": "AssertionError",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.message",
        "valueA": "Timed out retrying after 4000ms: expected '<li>' to contain 'item A'",
        "valueB": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'item A'",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.stack",
        "valueA": "    at Context.eval (webpack://cypress-12-demo/./cypress/e2e/xxx.spec.js:31:36)",
        "valueB": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'item A'\n    at Context.eval (webpack://cypress-13-demo/./cypress/e2e/xxx.spec.js:31:36)",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.line",
        "valueA": 31,
        "valueB": 31,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.column",
        "valueA": 37,
        "valueB": 37,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.originalFile",
        "valueA": "cypress/e2e/xxx.spec.js",
        "valueB": "cypress/e2e/xxx.spec.js",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.relativeFile",
        "valueA": "e2e/cypress-12-demo/cypress/e2e/xxx.spec.js",
        "valueB": "e2e/cypress-13-demo/cypress/e2e/xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.absoluteFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/e2e/xxx.spec.js",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/e2e/xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.frame",
        "valueA": "  29 |       cy.get(\".clear-completed\").click();\n  30 |       cy.get(\"@todos\").should(\"have.length\", 2);\n> 31 |       cy.get(\".todo-list li\").eq(0).should(\"contain\", TODO_ITEM_ONE);\n     |                                     ^\n  32 |       cy.get(\".todo-list li\").eq(1).should(\"contain\", \"XXXX\");\n  33 |     }\n  34 |   );",
        "valueB": "  29 |       cy.get(\".clear-completed\").click();\n  30 |       cy.get(\"@todos\").should(\"have.length\", 2);\n> 31 |       cy.get(\".todo-list li\").eq(0).should(\"contain\", TODO_ITEM_ONE);\n     |                                     ^\n  32 |       cy.get(\".todo-list li\").eq(1).should(\"contain\", \"XXXX\");\n  33 |     }\n  34 |   );",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].error.codeFrame.language",
        "valueA": "js",
        "valueB": "js",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.lifecycle",
        "valueA": 27,
        "valueB": 17,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[0].fnDuration",
        "valueA": 15,
        "valueB": 18,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[1].fnDuration",
        "valueA": 84,
        "valueB": 49,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[1].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[2].hookId",
        "valueA": "h6",
        "valueB": "h6",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[2].fnDuration",
        "valueA": 903,
        "valueB": 865,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.before each[2].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.test.fnDuration",
        "valueA": 4151,
        "valueB": 4148,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.test.afterFnDuration",
        "valueA": 211,
        "valueB": 182,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.after each[0].fnDuration",
        "valueA": 15,
        "valueB": 15,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.after each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 12,
            "afterFnDuration": 1
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:23.625Z",
        "valueB": "2023-09-07T15:45:13.398Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].wallClockDuration",
        "valueA": 5421,
        "valueB": 5282,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].videoTimestamp",
        "valueA": 6698,
        "valueB": 5370,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].startedAt",
        "valueA": "2023-09-07T14:43:23.625Z",
        "valueB": "2023-09-07T15:45:13.398Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].duration",
        "valueA": 5421,
        "valueB": 5282,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].screenshotId",
        "valueA": "a52go",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].name",
        "valueA": "screenshot",
        "valueB": "screenshot",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].testId",
        "valueA": "r4",
        "valueB": "r4",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].testAttemptIndex",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].takenAt",
        "valueA": "2023-09-07T14:43:28.809Z",
        "valueB": "2023-09-07T15:45:18.500Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].path",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots/xxx.spec.js/Clear completed button -- should remove completed items when clicked (failed).png",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots/xxx.spec.js/Clear completed button -- should remove completed items when clicked (failed).png",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].height",
        "valueA": 1440,
        "valueB": 1440,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].width",
        "valueA": 2560,
        "valueB": 2560,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].size",
        "valueA": "Does not exist",
        "valueB": 388041,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].dimensions",
        "valueA": "Does not exist",
        "valueB": {
            "width": 2560,
            "height": 1440
        },
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].multipart",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].specName",
        "valueA": "Does not exist",
        "valueB": "xxx.spec.js",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].testFailure",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].scaled",
        "valueA": "Does not exist",
        "valueB": true,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].blackout",
        "valueA": "Does not exist",
        "valueB": [],
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].attempts[0].screenshots[0].duration",
        "valueA": "Does not exist",
        "valueB": 179,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[1].duration",
        "valueA": "Does not exist",
        "valueB": 5329,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].testId",
        "valueA": "r5",
        "valueB": "r5",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].0",
        "valueA": "C",
        "valueB": "C",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].1",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].2",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].3",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].4",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].5",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].6",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].7",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].8",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].9",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].10",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].11",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].12",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].13",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].14",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].15",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].16",
        "valueA": "b",
        "valueB": "b",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].17",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].18",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].19",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].20",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[0].21",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].0",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].1",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].2",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].3",
        "valueA": "u",
        "valueB": "u",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].4",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].5",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].6",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].7",
        "valueA": "b",
        "valueB": "b",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].8",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].9",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].10",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].11",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].12",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].13",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].14",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].15",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].16",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].17",
        "valueA": "w",
        "valueB": "w",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].18",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].19",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].20",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].21",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].22",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].23",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].24",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].25",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].26",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].27",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].28",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].29",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].30",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].31",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].32",
        "valueA": "n",
        "valueB": "n",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].33",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].34",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].35",
        "valueA": "i",
        "valueB": "i",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].36",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].37",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].38",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].39",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].40",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].41",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].42",
        "valueA": "h",
        "valueB": "h",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].43",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].44",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].45",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].46",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].47",
        "valueA": "r",
        "valueB": "r",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].48",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].49",
        "valueA": " ",
        "valueB": " ",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].50",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].51",
        "valueA": "o",
        "valueB": "o",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].52",
        "valueA": "m",
        "valueB": "m",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].53",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].54",
        "valueA": "l",
        "valueB": "l",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].55",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].56",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].57",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].title[1].58",
        "valueA": "d",
        "valueB": "d",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].state",
        "valueA": "passed",
        "valueB": "passed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].body",
        "valueA": "function () {\n    cy.get(\"@todos\").eq(1).find(\".toggle\").check();\n    cy.get(\".clear-completed\").should(\"be.visible\").click();\n    cy.get(\".clear-completed\").should(\"not.be.visible\");\n  }",
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].displayError",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].state",
        "valueA": "passed",
        "valueB": "passed",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].error",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.lifecycle",
        "valueA": 32,
        "valueB": 26,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[0].hookId",
        "valueA": "h1",
        "valueB": "h1",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[0].fnDuration",
        "valueA": 7,
        "valueB": 10,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[0].afterFnDuration",
        "valueA": 1,
        "valueB": 0,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[1].hookId",
        "valueA": "h2",
        "valueB": "h2",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[1].fnDuration",
        "valueA": 55,
        "valueB": 91,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[1].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[2].hookId",
        "valueA": "h6",
        "valueB": "h6",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[2].fnDuration",
        "valueA": 857,
        "valueB": 867,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.before each[2].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.test.fnDuration",
        "valueA": 156,
        "valueB": 152,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.test.afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.after each[0].hookId",
        "valueA": "h4",
        "valueB": "h4",
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.after each[0].fnDuration",
        "valueA": 12,
        "valueB": 12,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.after each[0].afterFnDuration",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.after each[1]",
        "valueA": {
            "hookId": "h5",
            "fnDuration": 10,
            "afterFnDuration": 0
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].timings.after all",
        "valueA": [
            {
                "hookId": "h3",
                "fnDuration": 5,
                "afterFnDuration": 0
            }
        ],
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].failedFromHookId",
        "valueA": null,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].wallClockStartedAt",
        "valueA": "2023-09-07T14:43:29.058Z",
        "valueB": "2023-09-07T15:45:18.738Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].wallClockDuration",
        "valueA": 1141,
        "valueB": 1148,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].videoTimestamp",
        "valueA": 12131,
        "valueB": 10710,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].startedAt",
        "valueA": "2023-09-07T14:43:29.058Z",
        "valueB": "2023-09-07T15:45:18.738Z",
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].attempts[0].duration",
        "valueA": 1141,
        "valueB": 1148,
        "isEqual": false
    },
    {
        "path": "runs[1].tests[2].duration",
        "valueA": "Does not exist",
        "valueB": 1188,
        "isEqual": false
    },
    {
        "path": "startedTestsAt",
        "valueA": "2023-09-07T14:43:12.137Z",
        "valueB": "2023-09-07T15:45:05.096Z",
        "isEqual": false
    },
    {
        "path": "endedTestsAt",
        "valueA": "2023-09-07T14:43:30.200Z",
        "valueB": "2023-09-07T15:45:19.927Z",
        "isEqual": false
    },
    {
        "path": "config.animationDistanceThreshold",
        "valueA": 5,
        "valueB": 5,
        "isEqual": true
    },
    {
        "path": "config.arch",
        "valueA": "arm64",
        "valueB": "arm64",
        "isEqual": true
    },
    {
        "path": "config.autoOpen",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.baseUrl",
        "valueA": "https://todomvc.com/examples/vanillajs",
        "valueB": "https://todomvc.com/examples/vanillajs",
        "isEqual": true
    },
    {
        "path": "config.blockHosts",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.browsers[0].name",
        "valueA": "chrome",
        "valueB": "chrome",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].displayName",
        "valueA": "Chrome",
        "valueB": "Chrome",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].version",
        "valueA": "116.0.5845.179",
        "valueB": "116.0.5845.179",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].path",
        "valueA": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        "valueB": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        "isEqual": true
    },
    {
        "path": "config.browsers[0].minSupportedVersion",
        "valueA": 64,
        "valueB": 64,
        "isEqual": true
    },
    {
        "path": "config.browsers[0].majorVersion",
        "valueA": "116",
        "valueB": "116",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].name",
        "valueA": "edge",
        "valueB": "edge",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].displayName",
        "valueA": "Edge",
        "valueB": "Edge",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].version",
        "valueA": "116.0.1938.69",
        "valueB": "116.0.1938.69",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].path",
        "valueA": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        "valueB": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        "isEqual": true
    },
    {
        "path": "config.browsers[1].minSupportedVersion",
        "valueA": 79,
        "valueB": 79,
        "isEqual": true
    },
    {
        "path": "config.browsers[1].majorVersion",
        "valueA": "116",
        "valueB": "116",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].name",
        "valueA": "electron",
        "valueB": "electron",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].displayName",
        "valueA": "Electron",
        "valueB": "Electron",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].version",
        "valueA": "106.0.5249.51",
        "valueB": "106.0.5249.51",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].path",
        "valueA": "",
        "valueB": "",
        "isEqual": true
    },
    {
        "path": "config.browsers[2].majorVersion",
        "valueA": 106,
        "valueB": 106,
        "isEqual": true
    },
    {
        "path": "config.chromeWebSecurity",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.clientRoute",
        "valueA": "/__/",
        "valueB": "/__/",
        "isEqual": true
    },
    {
        "path": "config.configFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress.config.ts",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress.config.ts",
        "isEqual": false
    },
    {
        "path": "config.cypressBinaryRoot",
        "valueA": "/Users/miguelangarano/Library/Caches/Cypress/12.17.4/Cypress.app/Contents/Resources/app",
        "valueB": "/Users/miguelangarano/Library/Caches/Cypress/13.1.0/Cypress.app/Contents/Resources/app",
        "isEqual": false
    },
    {
        "path": "config.cypressEnv",
        "valueA": "production",
        "valueB": "production",
        "isEqual": true
    },
    {
        "path": "config.defaultCommandTimeout",
        "valueA": 4000,
        "valueB": 4000,
        "isEqual": true
    },
    {
        "path": "config.devServerPublicPathRoute",
        "valueA": "/__cypress/src",
        "valueB": "/__cypress/src",
        "isEqual": true
    },
    {
        "path": "config.downloadsFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/downloads",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/downloads",
        "isEqual": false
    },
    {
        "path": "config.env.currents_temp_file",
        "valueA": "/var/folders/1l/tzj2dqys6js7w35f8rx2jsq00000gn/T/tmp-53115-v88g9H7kmSJg",
        "valueB": "/var/folders/1l/tzj2dqys6js7w35f8rx2jsq00000gn/T/tmp-84752-d4apSw3XIvZ1",
        "isEqual": false
    },
    {
        "path": "config.env.currents_debug_enabled",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.excludeSpecPattern",
        "valueA": "*.hot-update.js",
        "valueB": "*.hot-update.js",
        "isEqual": true
    },
    {
        "path": "config.execTimeout",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.experimentalCspAllowList",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalFetchPolyfill",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalInteractiveRunEvents",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalMemoryManagement",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalModifyObstructiveThirdPartyCode",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalOriginDependencies",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalRunAllSpecs",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalSingleTabRunMode",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalSkipDomainInjection",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.experimentalSourceRewriting",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalStudio",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.experimentalWebKitSupport",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.fileServerFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo",
        "isEqual": false
    },
    {
        "path": "config.fixturesFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/fixtures",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/fixtures",
        "isEqual": false
    },
    {
        "path": "config.hosts",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.includeShadowDom",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.isInteractive",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.isTextTerminal",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.keystrokeDelay",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.modifyObstructiveCode",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.morgan",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.namespace",
        "valueA": "__cypress",
        "valueB": "__cypress",
        "isEqual": true
    },
    {
        "path": "config.numTestsKeptInMemory",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.pageLoadTimeout",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.platform",
        "valueA": "darwin",
        "valueB": "darwin",
        "isEqual": true
    },
    {
        "path": "config.port",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.projectId",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.projectName",
        "valueA": "cypress-12-demo",
        "valueB": "cypress-13-demo",
        "isEqual": false
    },
    {
        "path": "config.projectRoot",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo",
        "isEqual": false
    },
    {
        "path": "config.rawJson.e2e.baseUrl",
        "valueA": "https://todomvc.com/examples/vanillajs",
        "valueB": "https://todomvc.com/examples/vanillajs",
        "isEqual": true
    },
    {
        "path": "config.rawJson.e2e.supportFile",
        "valueA": "cypress/support/e2e.ts",
        "valueB": "cypress/support/e2e.ts",
        "isEqual": true
    },
    {
        "path": "config.rawJson.e2e.specPattern",
        "valueA": "cypress/*/**/*.spec.js",
        "valueB": "cypress/*/**/*.spec.js",
        "isEqual": true
    },
    {
        "path": "config.rawJson.e2e.setupNodeEvents",
        "valueA": "[Function setupNodeEvents]",
        "valueB": "[Function setupNodeEvents]",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].0",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].1",
        "valueA": "a",
        "valueB": "a",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].2",
        "valueA": "g",
        "valueB": "g",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].3",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].4",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].5",
        "valueA": "/",
        "valueB": "/",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].6",
        "valueA": "_",
        "valueB": "_",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].7",
        "valueA": "_",
        "valueB": "_",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].8",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].9",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].10",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].11",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].12",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].13",
        "valueA": "_",
        "valueB": "_",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].14",
        "valueA": "_",
        "valueB": "_",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].15",
        "valueA": "/",
        "valueB": "/",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].16",
        "valueA": "*",
        "valueB": "*",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].17",
        "valueA": ".",
        "valueB": ".",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].18",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].19",
        "valueA": "p",
        "valueB": "p",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].20",
        "valueA": "e",
        "valueB": "e",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].21",
        "valueA": "c",
        "valueB": "c",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].22",
        "valueA": ".",
        "valueB": ".",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].23",
        "valueA": "t",
        "valueB": "t",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].24",
        "valueA": "s",
        "valueB": "s",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.specPattern[0].25",
        "valueA": "x",
        "valueB": "x",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.setupNodeEvents",
        "valueA": "[Function setupNodeEvents]",
        "valueB": "[Function setupNodeEvents]",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.devServer.framework",
        "valueA": "next",
        "valueB": "next",
        "isEqual": true
    },
    {
        "path": "config.rawJson.component.devServer.bundler",
        "valueA": "webpack",
        "valueB": "webpack",
        "isEqual": true
    },
    {
        "path": "config.rawJson.baseUrl",
        "valueA": "https://todomvc.com/examples/vanillajs",
        "valueB": "https://todomvc.com/examples/vanillajs",
        "isEqual": true
    },
    {
        "path": "config.rawJson.supportFile",
        "valueA": "cypress/support/e2e.ts",
        "valueB": "cypress/support/e2e.ts",
        "isEqual": true
    },
    {
        "path": "config.rawJson.specPattern",
        "valueA": "cypress/*/**/*.spec.js",
        "valueB": "cypress/*/**/*.spec.js",
        "isEqual": true
    },
    {
        "path": "config.rawJson.setupNodeEvents",
        "valueA": "[Function setupNodeEvents]",
        "valueB": "[Function setupNodeEvents]",
        "isEqual": true
    },
    {
        "path": "config.rawJson.projectRoot",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo",
        "isEqual": false
    },
    {
        "path": "config.rawJson.projectName",
        "valueA": "cypress-12-demo",
        "valueB": "cypress-13-demo",
        "isEqual": false
    },
    {
        "path": "config.rawJson.repoRoot",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13",
        "isEqual": true
    },
    {
        "path": "config.redirectionLimit",
        "valueA": 20,
        "valueB": 20,
        "isEqual": true
    },
    {
        "path": "config.repoRoot",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13",
        "isEqual": true
    },
    {
        "path": "config.report",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.reporter",
        "valueA": "spec",
        "valueB": "spec",
        "isEqual": true
    },
    {
        "path": "config.reporterOptions",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.reporterRoute",
        "valueA": "/__cypress/reporter",
        "valueB": "/__cypress/reporter",
        "isEqual": true
    },
    {
        "path": "config.requestTimeout",
        "valueA": 5000,
        "valueB": 5000,
        "isEqual": true
    },
    {
        "path": "config.resolved.animationDistanceThreshold.value",
        "valueA": 5,
        "valueB": 5,
        "isEqual": true
    },
    {
        "path": "config.resolved.animationDistanceThreshold.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.arch.value",
        "valueA": "arm64",
        "valueB": "arm64",
        "isEqual": true
    },
    {
        "path": "config.resolved.arch.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.baseUrl.value",
        "valueA": "https://todomvc.com/examples/vanillajs",
        "valueB": "https://todomvc.com/examples/vanillajs",
        "isEqual": true
    },
    {
        "path": "config.resolved.baseUrl.from",
        "valueA": "config",
        "valueB": "config",
        "isEqual": true
    },
    {
        "path": "config.resolved.blockHosts.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.blockHosts.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.chromeWebSecurity.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.chromeWebSecurity.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.clientCertificates.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.defaultCommandTimeout.value",
        "valueA": 4000,
        "valueB": 4000,
        "isEqual": true
    },
    {
        "path": "config.resolved.defaultCommandTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.downloadsFolder.value",
        "valueA": "cypress/downloads",
        "valueB": "cypress/downloads",
        "isEqual": true
    },
    {
        "path": "config.resolved.downloadsFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.env.currents_temp_file.value",
        "valueA": "/var/folders/1l/tzj2dqys6js7w35f8rx2jsq00000gn/T/tmp-53115-v88g9H7kmSJg",
        "valueB": "/var/folders/1l/tzj2dqys6js7w35f8rx2jsq00000gn/T/tmp-84752-d4apSw3XIvZ1",
        "isEqual": false
    },
    {
        "path": "config.resolved.env.currents_temp_file.from",
        "valueA": "cli",
        "valueB": "cli",
        "isEqual": true
    },
    {
        "path": "config.resolved.env.currents_debug_enabled.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.env.currents_debug_enabled.from",
        "valueA": "cli",
        "valueB": "cli",
        "isEqual": true
    },
    {
        "path": "config.resolved.execTimeout.value",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.resolved.execTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalCspAllowList.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalCspAllowList.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalFetchPolyfill.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalFetchPolyfill.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalInteractiveRunEvents.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalInteractiveRunEvents.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalRunAllSpecs.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalRunAllSpecs.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalMemoryManagement.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalMemoryManagement.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalModifyObstructiveThirdPartyCode.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalModifyObstructiveThirdPartyCode.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSkipDomainInjection.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSkipDomainInjection.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalOriginDependencies.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalOriginDependencies.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSourceRewriting.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSourceRewriting.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSingleTabRunMode.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalSingleTabRunMode.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalStudio.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalStudio.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalWebKitSupport.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.experimentalWebKitSupport.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.fileServerFolder.value",
        "valueA": "",
        "valueB": "",
        "isEqual": true
    },
    {
        "path": "config.resolved.fileServerFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.fixturesFolder.value",
        "valueA": "cypress/fixtures",
        "valueB": "cypress/fixtures",
        "isEqual": true
    },
    {
        "path": "config.resolved.fixturesFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.excludeSpecPattern.value",
        "valueA": "*.hot-update.js",
        "valueB": "*.hot-update.js",
        "isEqual": true
    },
    {
        "path": "config.resolved.excludeSpecPattern.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.includeShadowDom.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.includeShadowDom.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.keystrokeDelay.value",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.resolved.keystrokeDelay.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.modifyObstructiveCode.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.modifyObstructiveCode.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.nodeVersion",
        "valueA": {
            "from": "default"
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "config.resolved.numTestsKeptInMemory.value",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.resolved.numTestsKeptInMemory.from",
        "valueA": "config",
        "valueB": "config",
        "isEqual": true
    },
    {
        "path": "config.resolved.platform.value",
        "valueA": "darwin",
        "valueB": "darwin",
        "isEqual": true
    },
    {
        "path": "config.resolved.platform.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.pageLoadTimeout.value",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.resolved.pageLoadTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.port.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.port.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.projectId.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.projectId.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.redirectionLimit.value",
        "valueA": 20,
        "valueB": 20,
        "isEqual": true
    },
    {
        "path": "config.resolved.redirectionLimit.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.reporter.value",
        "valueA": "spec",
        "valueB": "spec",
        "isEqual": true
    },
    {
        "path": "config.resolved.reporter.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.reporterOptions.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.reporterOptions.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.requestTimeout.value",
        "valueA": 5000,
        "valueB": 5000,
        "isEqual": true
    },
    {
        "path": "config.resolved.requestTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.resolvedNodePath.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.resolvedNodePath.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.resolvedNodeVersion.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.resolvedNodeVersion.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.responseTimeout.value",
        "valueA": 30000,
        "valueB": 30000,
        "isEqual": true
    },
    {
        "path": "config.resolved.responseTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.retries.value.runMode",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.resolved.retries.value.openMode",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.resolved.retries.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.screenshotOnRunFailure.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.screenshotOnRunFailure.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.screenshotsFolder.value",
        "valueA": "cypress/screenshots",
        "valueB": "cypress/screenshots",
        "isEqual": true
    },
    {
        "path": "config.resolved.screenshotsFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.slowTestThreshold.value",
        "valueA": 10000,
        "valueB": 10000,
        "isEqual": true
    },
    {
        "path": "config.resolved.slowTestThreshold.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.scrollBehavior.value",
        "valueA": "top",
        "valueB": "top",
        "isEqual": true
    },
    {
        "path": "config.resolved.scrollBehavior.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.supportFile.value",
        "valueA": "cypress/support/e2e.ts",
        "valueB": "cypress/support/e2e.ts",
        "isEqual": true
    },
    {
        "path": "config.resolved.supportFile.from",
        "valueA": "config",
        "valueB": "config",
        "isEqual": true
    },
    {
        "path": "config.resolved.supportFolder.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.supportFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.taskTimeout.value",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.resolved.taskTimeout.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.testIsolation.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.testIsolation.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.trashAssetsBeforeRuns.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.trashAssetsBeforeRuns.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.userAgent.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.userAgent.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.video.value",
        "valueA": true,
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.resolved.video.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.videoCompression.value",
        "valueA": 32,
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.resolved.videoCompression.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.videosFolder.value",
        "valueA": "cypress/videos",
        "valueB": "cypress/videos",
        "isEqual": true
    },
    {
        "path": "config.resolved.videosFolder.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.videoUploadOnPasses",
        "valueA": {
            "value": true,
            "from": "default"
        },
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "config.resolved.viewportHeight.value",
        "valueA": 660,
        "valueB": 660,
        "isEqual": true
    },
    {
        "path": "config.resolved.viewportHeight.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.viewportWidth.value",
        "valueA": 1000,
        "valueB": 1000,
        "isEqual": true
    },
    {
        "path": "config.resolved.viewportWidth.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.waitForAnimations.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.waitForAnimations.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.watchForFileChanges.value",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.resolved.watchForFileChanges.from",
        "valueA": "config",
        "valueB": "config",
        "isEqual": true
    },
    {
        "path": "config.resolved.specPattern.value",
        "valueA": "cypress/*/**/*.spec.js",
        "valueB": "cypress/*/**/*.spec.js",
        "isEqual": true
    },
    {
        "path": "config.resolved.specPattern.from",
        "valueA": "config",
        "valueB": "config",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].name",
        "valueA": "chrome",
        "valueB": "chrome",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].displayName",
        "valueA": "Chrome",
        "valueB": "Chrome",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].version",
        "valueA": "116.0.5845.179",
        "valueB": "116.0.5845.179",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].path",
        "valueA": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        "valueB": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].minSupportedVersion",
        "valueA": 64,
        "valueB": 64,
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[0].majorVersion",
        "valueA": "116",
        "valueB": "116",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].name",
        "valueA": "edge",
        "valueB": "edge",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].displayName",
        "valueA": "Edge",
        "valueB": "Edge",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].version",
        "valueA": "116.0.1938.69",
        "valueB": "116.0.1938.69",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].path",
        "valueA": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        "valueB": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].minSupportedVersion",
        "valueA": 79,
        "valueB": 79,
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[1].majorVersion",
        "valueA": "116",
        "valueB": "116",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].name",
        "valueA": "electron",
        "valueB": "electron",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].channel",
        "valueA": "stable",
        "valueB": "stable",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].family",
        "valueA": "chromium",
        "valueB": "chromium",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].displayName",
        "valueA": "Electron",
        "valueB": "Electron",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].version",
        "valueA": "106.0.5249.51",
        "valueB": "106.0.5249.51",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].path",
        "valueA": "",
        "valueB": "",
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.value[2].majorVersion",
        "valueA": 106,
        "valueB": 106,
        "isEqual": true
    },
    {
        "path": "config.resolved.browsers.from",
        "valueA": "runtime",
        "valueB": "runtime",
        "isEqual": true
    },
    {
        "path": "config.resolved.hosts.value",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.resolved.hosts.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolved.isInteractive.value",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.resolved.isInteractive.from",
        "valueA": "default",
        "valueB": "default",
        "isEqual": true
    },
    {
        "path": "config.resolvedNodePath",
        "valueA": "/Users/miguelangarano/.nvm/versions/node/v18.14.2/bin/node",
        "valueB": "/Users/miguelangarano/.nvm/versions/node/v18.14.2/bin/node",
        "isEqual": true
    },
    {
        "path": "config.resolvedNodeVersion",
        "valueA": "18.14.2",
        "valueB": "18.14.2",
        "isEqual": true
    },
    {
        "path": "config.responseTimeout",
        "valueA": 30000,
        "valueB": 30000,
        "isEqual": true
    },
    {
        "path": "config.retries.runMode",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.retries.openMode",
        "valueA": 0,
        "valueB": 0,
        "isEqual": true
    },
    {
        "path": "config.screenshotOnRunFailure",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.screenshotsFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/screenshots",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/screenshots",
        "isEqual": false
    },
    {
        "path": "config.scrollBehavior",
        "valueA": "top",
        "valueB": "top",
        "isEqual": true
    },
    {
        "path": "config.setupNodeEvents",
        "valueA": "[Function setupNodeEvents]",
        "valueB": "[Function setupNodeEvents]",
        "isEqual": true
    },
    {
        "path": "config.slowTestThreshold",
        "valueA": 10000,
        "valueB": 10000,
        "isEqual": true
    },
    {
        "path": "config.socketId",
        "valueA": "svnqisky8l",
        "valueB": "4tp88ruxjj",
        "isEqual": false
    },
    {
        "path": "config.socketIoCookie",
        "valueA": "__socket",
        "valueB": "__socket",
        "isEqual": true
    },
    {
        "path": "config.socketIoRoute",
        "valueA": "/__socket",
        "valueB": "/__socket",
        "isEqual": true
    },
    {
        "path": "config.specPattern",
        "valueA": "cypress/*/**/*.spec.js",
        "valueB": "cypress/*/**/*.spec.js",
        "isEqual": true
    },
    {
        "path": "config.supportFile",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/support/e2e.ts",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/support/e2e.ts",
        "isEqual": false
    },
    {
        "path": "config.supportFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/support",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/support",
        "isEqual": false
    },
    {
        "path": "config.taskTimeout",
        "valueA": 60000,
        "valueB": 60000,
        "isEqual": true
    },
    {
        "path": "config.testIsolation",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.trashAssetsBeforeRuns",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.userAgent",
        "valueA": null,
        "valueB": null,
        "isEqual": true
    },
    {
        "path": "config.version",
        "valueA": "12.17.4",
        "valueB": "13.1.0",
        "isEqual": false
    },
    {
        "path": "config.video",
        "valueA": true,
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.videoCompression",
        "valueA": 32,
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.videoUploadOnPasses",
        "valueA": true,
        "valueB": "Does not exist",
        "isEqual": false
    },
    {
        "path": "config.videosFolder",
        "valueA": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-12-demo/cypress/videos",
        "valueB": "/Users/miguelangarano/Documents/GitHub/cypress-cloud-private-fix-cypress-13/e2e/cypress-13-demo/cypress/videos",
        "isEqual": false
    },
    {
        "path": "config.viewportHeight",
        "valueA": 660,
        "valueB": 660,
        "isEqual": true
    },
    {
        "path": "config.viewportWidth",
        "valueA": 1000,
        "valueB": 1000,
        "isEqual": true
    },
    {
        "path": "config.waitForAnimations",
        "valueA": true,
        "valueB": true,
        "isEqual": true
    },
    {
        "path": "config.watchForFileChanges",
        "valueA": false,
        "valueB": false,
        "isEqual": true
    },
    {
        "path": "config.testingType",
        "valueA": "e2e",
        "valueB": "e2e",
        "isEqual": true
    },
    {
        "path": "config.hideCommandLog",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.hideRunnerUi",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "config.protocolEnabled",
        "valueA": "Does not exist",
        "valueB": false,
        "isEqual": false
    },
    {
        "path": "status",
        "valueA": "finished",
        "valueB": "finished",
        "isEqual": true
    },
    {
        "path": "runUrl",
        "valueA": "https://app.currents.dev/run/8bca8d1e39c70474",
        "valueB": "https://app.currents.dev/run/6c996f69397aa4f2",
        "isEqual": false
    }
]